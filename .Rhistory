library(shiny)
runApp("App-1")
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel(strong("Palette Extractor"), windowTitle="Palette Extractor"),
sidebarLayout(
sidebarPanel(fileInput("file", label=strong("Select an image:")),
sliderInput(inputId="chips", label=strong("Select the number of output colors:"), min=1, max=10^2, value=25),
br(),
strong("This is the color map of your image:"),
br(),
plotOutput("image1")),
mainPanel(strong(textOutput("text1")),
br(),
textOutput("text2"),
br(),
plotOutput("plot1"),
br(),
downloadButton("txtfile", label="Download hex color codes in a text file (.txt)"),
br(),
br(),
downloadButton("cssfile", label="Download colors in a stylesheet file (.css)"),
br()))
))
library(shiny)
library(jpeg)
library(raster)
library(abind)
# Define server logic required
shinyServer(function(input, output) {
# Lee la imagen:
# creates an array of three matrixes, one per channel (in R, G, B format)
my_image <- reactive({
if(class(input$file$datapath)=="character")
{
image <- readJPEG(source=input$file$datapath)
# This piece of code reduce its resolution:
p <- 30000 # number of pixels
FACT <- round(sqrt(dim(image)[1]*dim(image)[2]/p))
if(FACT  > 1)
{
new <- list()
for(i in 1:dim(image)[3])
{
x <- image[,,i]
r <- raster(list(x=1:nrow(x), y=1:ncol(x), z=x)) # creates a raster
new[i] <- list(t(as.matrix(aggregate(r, fact=FACT))))
}
image <- abind(new[[1]], new[[2]], new[[3]], along=3)
}
return(image)
} else {return(NULL)}
})
# Hace los cálculos
# returns a named numeric vector, with exactly k colors with the frequency of each color (number of pixels)
# the names of the vector are color names in hexagesimal format
COL <- reactive({
# Main arguments:
image <- my_image() # recupera la imagen
k <- input$chips # the number of desired palette chips (the number of desired output colors)
# Coloca los píxeles por separado, sin tener en cuenta su configuración espacial
R <- as.vector(image[,,1])
G <- as.vector(image[,,2])
B <- as.vector(image[,,3])
RGB0 <- data.frame(R, G, B)
# DIFERENTES ALGORITMOS DE COLOR AVERAGING:
# se puede abordar como un problema de clusterización
# http://en.wikipedia.org/wiki/Cluster_analysis#Clustering_algorithms
# Round the colors, according to the number of desired output colors
margin <- 1.5 # wide enough
kref = c(k:(k+round(margin/2*k))) # desired output, with some margin
N = nrow(RGB0) # true number of colors (too many)
upper <- 1000 # round to the thousandth
lower <- 1 # round to the unit (only primary colors, black, or white).
# For that reason, this algorithm moves towards primary colors when k is low.
N0 <- 0
for(i in 1:50) # 50 is the maximum number of iterations
{
a <- round((upper+lower)/2) # precission parameter to adjust
RGB.not.unique <- round(RGB0*a)/a
RGB <- unique(RGB.not.unique)
N = nrow(RGB) # number of colors
# pseudo divide and conquer algorithm:
if(N < kref[1]) lower <- a # if there are too few colors, it will search above current a
if(N > kref[length(kref)]) upper <- a # if there are too many colors, it will search below current a
if(N == N0) break() # breaks the loop if there is no improvement
if(N %in% kref) break() # if we have an acceptable number of colors, it breaks the loop
N0 <- N
}
# Calculates the frequency of each color:
COL.not.unique <- rgb(RGB.not.unique[,"R"], RGB.not.unique[,"G"], RGB.not.unique[,"B"])
freq.col <- sort(table(COL.not.unique), decreasing=T)
freq.col <- freq.col[1:k] # truncates to k, discards only infrequent colors in the image
# Creates/subsets COL and RGB objects
COL <- rgb(RGB[,"R"], RGB[,"G"], RGB[,"B"])
keep <- COL %in% names(freq.col)
COL <- COL[keep]
RGB <- RGB[keep,]
# Order the colors by a given criterion (only "R", sorting by relative red content, is implemented):
COL <- COL[order(RGB[,"R"]/rowSums(RGB), decreasing=T)]
freq.col <- freq.col[COL]
# Output:
return(COL)
})
# Prepara la representación de la imagen seleccionada en el panel izquierdo (color map)
getVarHeight <- function() {
if(class(input$file$datapath)=="character")
{
im <- my_image()
return(10*dim(im)[1])
} else {return("auto")}
}
getVarWidth <- function() {
if(class(input$file$datapath)=="character")
{
im <- my_image()
return(10*dim(im)[2])
} else {return("auto")}
}
# Representa la imagen seleccionada en el panel izquierdo:
output$image1 <- renderPlot({
if(class(input$file$datapath)=="character")
{
im <- my_image()
# Si queremos sustituir cada píxel de color original, por el color más cercano de los de la paleta:
colors <- COL()
colors.rgb <- col2rgb(colors)/255
color.distance <- array(NA, dim=c(dim(im)[1], dim(im)[2], length(colors)))
for(i in 1:length(colors))
{
Rdist <- abs(im[,,1] - colors.rgb["red",i])
Gdist <- abs(im[,,2] - colors.rgb["green",i])
Bdist <- abs(im[,,3] - colors.rgb["blue",i])
color.distance[,,i] <- Rdist + Gdist + Bdist # this is a matrix as big as the image
}
# busca la capa del array con el mínimo valor para cada pixel
# ese es el color más cercano para cada pixel
# coge sus valores r, g, b, y los introduce en la imagen
for(i in 1:dim(color.distance)[1])
for(j in 1:dim(color.distance)[2])
im[i, j, 1:3] <- colors.rgb[,which(color.distance[i, j,]==min(color.distance[i, j,]))[1]]
# por alguna razón, se gira de izquierda a derecha, así que la reordeno:
im <- im[,dim(im)[2]:1,]
# Esto plotea la imagen
width <- dim(im)[2]
height <- dim(im)[1]
par(mar=c(0, 0, 0, 0), oma=c(0, 0, 0, 0))
plot(c(0,width),c(0,height), type='n', ylab="", xlab="", xaxt="n", yaxt="n")
rasterImage(as.raster(im), 0, 0, width, height)
} else {
par(mar=c(0, 0, 0, 0), oma=c(0, 0, 0, 0))
plot(0, xlim=c(-1, 1), ylim=c(-1, 1), col=0, type='n', ylab="", xlab="", xaxt="n", yaxt="n")
text(0, 0, labels="No file selected")
}
}, width=getVarWidth, height=getVarHeight)
# Primera parte del output (el titulillo)
output$text1 <- renderText({
if(class(input$file$datapath)=="character")
{
if(input$chips==1) return("This is the most characteristic color of your image:")
if(input$chips >1) return(paste("These are the most characteristic", input$chips, "colors of your image:"))
} else {return("")}
})
# Segunda parte del output (los códigos de los colores):
output$text2 <- renderText({
if(class(input$file$datapath)=="character")
{
colors <- COL()
return(colors)
} else {return("")}
})
# Tercera parte del output (la representación de la paleta):
output$plot1 <- renderPlot({
if(class(input$file$datapath)=="character")
{
colors <- COL()
# Establishes parameters to plot the palette
N <- length(colors)
l <- ceiling(sqrt(N))
x <- rep(1:l, l)[1:N]
y <- unlist(lapply(l:1, function(x) rep(x, l)))[1:N]
w <- 0.87 # width of the colored squares [0, 1]
XLIM <- range(c(x + (w/2), x - (w/2)))
YLIM <- range(c(y + (w/2), y - (w/2)))
# Plots the palette:
par(mar=c(0, 0, 0, 0), oma=c(0, 0, 0, 0))
plot(0, col=0, xlim=XLIM, ylim=YLIM, xlab=NA, ylab=NA, xaxt="n", yaxt="n", bty="n")
for(i in 1:N)
{
polygon(x=c(x[i]-w/2, x[i]-w/2, x[i]+w/2, x[i]+w/2), y=c(y[i]-w/2, y[i]+w/2, y[i]+w/2, y[i]-w/2), col=colors[i], border=NA)
text(x=x[i], y=y[i], labels=colors[i], col=ifelse(mean(col2rgb(colors[i])) < 255/2, "white", "black"))
}
} else {
plot(0, col=0, xlab=NA, ylab=NA, xaxt="n", yaxt="n", bty="n")
}
})
# Cuarta parte del output (descarga de diferentes archivos):
# descarga 1: archivo de texto
output$txtfile <- downloadHandler(
filename = paste0("colors", gsub(":", "", gsub(" ", "", as.character(Sys.time()))), ".txt"),
content = function(file) {
# This creates the content for the file:
colors <- COL()
# This creates the file to download:
writeLines(colors, file)
}
)
# descarga 2: archivo .css
output$cssfile <- downloadHandler(
filename = paste0("colors", gsub(":", "", gsub(" ", "", as.character(Sys.time()))), ".css"),
content = function(file) {
# This creates the content for the file:
colors <- COL()
N <- length(colors)
content.for.css.file <- paste0(".color", c(1:N), " { color: ", colors, "}")
# This creates the file to download:
writeLines(content.for.css.file, file)
}
)
# descarga 3:
# descarga 4:
# etc
})
library(shiny)
runApp("App-1")
library(shiny)
setwd("/Users/marielainsua/Documents/PROFESIONAL/PROYECTOS/SHINY/")
runApp("App-1")
